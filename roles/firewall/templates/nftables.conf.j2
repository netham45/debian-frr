flush ruleset

table inet firewall {
        # Define interface groups
        define DEV_LANS = { eth0, eth2, eth3, eth4, eth5, wg0 }
        define DEV_WANS = { eth1, eth6 }

        # Define private networks
        define NET_PRIVATE = { 192.168.0.0/24, 192.168.3.0/24, 192.168.4.0/24, 192.168.5.0/24, 192.168.6.0/24, 192.168.251.0/24 }
        define NET_FORWARD_ALL = { 192.168.0.0/24, 192.168.251.0/24 }
        define NET_FORWARD_WAN_ONLY = { 192.168.3.0/24, 192.168.4.0/24 }
        define HOME_ASSISTANT = { 192.168.5.107/32, 192.168.3.144/32 }
        define MQTT_PORTS = { 1883, 8883 }
        define MQTT_SERVER = 192.168.0.164

        # Define cloudflare networks
        set cloudflare_ipv4 {
                type ipv4_addr
                flags interval
                elements = { 103.21.244.0/22, 103.22.200.0/22, 103.31.4.0/22, 104.16.0.0/13, 104.24.0.0/14, 108.162.192.0/18, 131.0.72.0/22, 141.101.64.0/18, 162.158.0.0/15, 172.64.0.0/13, 173.245.48.0/20, 188.114.96.0/20, 190.93.240.0/20, 197.234.240.0/22, 198.41.128.0/17 }
        }
        set cloudflare_ipv6 {
                type ipv6_addr
                flags interval
                elements = { 2400:cb00::/32, 2606:4700::/32, 2803:f800::/32, 2405:b500::/32, 2405:8100::/32, 2a06:98c0::/29, 2c0f:f248::/32 }
        }

        chain input {
                type filter hook input priority filter; policy drop;
                iifname eth0 tcp dport 22 accept comment "Anti-Lockout SSH Rule"
                ct state { established, related } accept
                iif lo accept
                ip protocol icmp accept
                ip6 nexthdr ipv6-icmp accept
                iifname $DEV_LANS udp dport { 67, 68 } accept comment "Allow DHCP"
                iifname $DEV_LANS tcp dport 53 accept comment "Allow DNS TCP"
                iifname $DEV_LANS udp dport 53 accept comment "Allow DNS UDP"
                iifname $DEV_LANS udp dport 123 accept comment "Allow NTP"
                iifname $DEV_WANS udp dport 51820 accept comment "Allow WireGuard"
                iifname $DEV_LANS udp dport 161 accept comment "Allow SNMP"
                iifname eth99 ip protocol ospf accept comment "Allow OSPF"
        }

        chain forward {
                type filter hook forward priority filter; policy drop;
                # Allow established and related connections
                ct state { established, related } accept

                # Allow traffic based on source subnet
                ip saddr $NET_FORWARD_ALL accept comment "Allow specified subnets to all" # WG, management lan to all
                ip saddr $NET_FORWARD_WAN_ONLY oifname $DEV_WANS accept # Guest, VM vlan internet
                {% for rule in port_forwards -%}
                ip saddr {{ rule.forward.allowed_sources }} {{ rule.forward.proto }} dport {{ rule.forward.destination_port }} accept
                {% endfor -%}
                ip saddr $HOME_ASSISTANT ip daddr $MQTT_SERVER tcp dport $MQTT_PORTS accept # Home Assistant to Frigate MQTT
        }

        chain postrouting {
                type nat hook postrouting priority srcnat; policy accept;
                ip saddr $NET_PRIVATE oifname $DEV_WANS masquerade
        }

        chain prerouting_nat {
                type nat hook prerouting priority dstnat; policy accept;
                iifname { wg0, eth0, eth2, eth3 } accept
                iifname eth5 ip daddr != 192.168.6.7 udp dport 123 dnat ip to 192.168.6.7:123
                iifname eth5 ip daddr != 192.168.6.7 tcp dport 123 dnat ip to 192.168.6.7:123
                {% for rule in port_forwards -%}
                iifname $DEV_WANS ip saddr {{ rule.forward.allowed_sources }} {{ rule.forward.proto }} dport {{ rule.forward.source_port }} dnat to {{ rule.forward.destination_ip }}:{{ rule.forward.destination_port }}
                {% endfor -%}
        }
}
